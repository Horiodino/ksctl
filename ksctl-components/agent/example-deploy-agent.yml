apiVersion: v1
kind: Namespace
metadata:
  name: ksctl
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ksctl-sa
  namespace: ksctl
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ksctl
  name: configmap-reader
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "update", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  namespace: ksctl
  name: configmap-reader-binding
subjects:
  - kind: ServiceAccount
    name: ksctl-sa
roleRef:
  kind: Role
  name: configmap-reader
  apiGroup: rbac.authorization.k8s.io

---
# https://kubernetes.io/docs/concepts/configuration/configmap/
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: ksctl
  name: ksctl-state
data:
  state.json: |
    {"cluster_name": "name", "region": "xyz", "count": 0}
---
apiVersion: v1
kind: Secret
metadata:
  namespace: ksctl
  name: ksctl-storage
data:
  mongo: LW5hbWU9bW9uZ28sTU9OR09EQl9VU0VSPWRlbW8sTU9OR09EQl9QQVNTV09SRD14eXosTU9OR09EQl9ETlM9eHV5Lnhjb20=
  local: LW5hbWU9bG9jYWw=
---
apiVersion: v1
kind: Service
metadata:
  namespace: ksctl
  name: ksctl-agent
spec:
  selector:
    app: ksctl-agent
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: ksctl
  name:  ksctl-agent
  labels:
    app:  ksctl-agent
spec:
  selector:
    matchLabels:
      app: ksctl-agent
  template:
    metadata:
      labels:
        app:  ksctl-agent
    spec:
      serviceAccountName: ksctl-sa
      containers:
      - name: ksctl-agent
        image: ghcr.io/ksctl/ksctl-agent:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 8080
            name: grpc-server
        env:
        - name: CLOUD_TOKEN
          value: "SUPER-SECRET"
        - name: STORAGE_DRIVER
          valueFrom:
            secretKeyRef:
              key: mongo
              name: ksctl-storage
      restartPolicy: Always
---
# the configmap cannot be written
# so we need to get the state file such a way that we can write the data directly RW to configmap
# one approach could be to add support for read and write operation of configmap using kubernetes ServiceAccount
# and may be we can use it to read and write the configmap provided that user has not choosen external storage provider
# for that we need the Specific environment variables like mongodb